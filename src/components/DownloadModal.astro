---
import { Icon } from 'astro-icon/components'

interface Props {
    links: {
        faq: string
        install: string
    }
}

const { links } = Astro.props
---

<dialog class="modal" id="download-modal">
    <div class="modal-content">
        <div class="modal-header">
            <div class="header-title">
                <Icon name="download-icon" class="icons" size={22} width={22} />
                <h1>Installing Atlas</h1>
            </div>
            <button aria-label="Close" class="close-button" id="modal-close">
                <Icon name="close-line" class="icons" size={18} width={18} />
            </button>
        </div>
        <div class="modal-body">
            <div class="modal-view" id="docs-view">
                <p class="description">To get started, you'll need to follow our installation guide below. We have made it as easy to follow as possible, with all the steps to get you up and running. Thank you for using Atlas! ðŸ˜Š</p>

                <div class="button-group">
                    <a class="button primary" href={links.install} target="_blank">Installation Guide <Icon name="arrow-right-line" size={16} /></a>
                    <a class="button secondary" href={links.faq} target="_blank">Install FAQ <Icon name="arrow-right-line" size={16} /></a>
                </div>

                <hr class="divider" />

                <button class="toggle-button" id="show-downloads">
                    I'm following the guide, show me the downloads <Icon name="arrow-right-line" size={16} />
                </button>
            </div>
            <div class="modal-view" id="downloads-view" style="display: none;">
                <p class="description">
                    <strong>You should only download these when instructed to by the install guide.</strong>
                    If you aren't following the install guide, click the button below to go back.
                </p>

                <p class="download-count" id="download-count">Fetching download count...</p>

                <div class="button-group">
                    <button class="button primary" id="playbook-dl-btn">Atlas Playbook <Icon name="arrow-right-line" size={16} /></button>
                    <a class="button secondary" href="https://download.ameliorated.io/AME%20Wizard%20Beta.zip" rel="noreferrer noopener" target="_self">AME Wizard <Icon name="arrow-right-line" size={16} /></a>
                </div>

                <hr class="divider" />

                <button class="toggle-button" id="show-docs">
                    <Icon name="arrow-left-line" size={16} /> Back to the install guide
                </button>
            </div>
        </div>
    </div>
</dialog>

<style>
    .modal {
        padding: 0;
        margin: auto;
        border: none;
        background: transparent;
        max-height: 100vh;
        max-width: 100vw;

        &::backdrop {
            background: rgba(0, 0, 0, 0.45);
            backdrop-filter: blur(8px);
        }

        &[open] {
            display: grid;
            place-items: center;
            animation: show 250ms cubic-bezier(0.2, 0, 0, 1);
        }

        @media (max-width: 640px) {
            .modal-content {
                margin: 0.75rem;
                border-radius: 1rem;
            }

            .modal-header {
                padding: 1rem 1.25rem;
            }

            .modal-body {
                padding: 1.25rem;
            }

            .description {
                font-size: 0.875rem;
            }
        }
    }

    .modal-content {
        border: 1px solid rgba(229, 231, 235, 0.1);
        box-shadow:
            0 25px 50px -12px rgba(0, 0, 0, 0.25),
            0 0 0 1px rgba(255, 255, 255, 0.1);
        max-width: 32rem;
        width: 100%;
        border-radius: 1.25rem;
        position: relative;
        margin: 1rem;
        display: flex;
        flex-direction: column;
        background: var(--bg-modal-gradient);
        overflow: hidden;

        .modal-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1.25rem 1.5rem;
            color: white;
            border-bottom: 1px solid rgba(229, 231, 235, 0.1);
            background: rgba(255, 255, 255, 0.02);

            .header-title {
                display: flex;
                gap: 0.75rem;
                align-items: center;

                h1 {
                    font-size: 1.25rem;
                    font-weight: 600;
                    letter-spacing: -0.01em;
                }
            }

            .close-button {
                opacity: 0.6;
                padding: 0.5rem;
                margin: -0.5rem;
                transition: all 200ms ease;
                border-radius: 0.5rem;
                line-height: 0;
                cursor: pointer;

                &:hover {
                    opacity: 1;
                    background-color: rgba(255, 255, 255, 0.1);
                }
            }
        }

        .modal-body {
            padding: 1.5rem;

            .modal-view {
                display: flex;
                flex-direction: column;
                gap: 1.5rem;
                animation: fade 250ms ease-out;

                .description {
                    font-size: 1rem;

                    strong {
                        color: white;
                        font-weight: 600;
                    }
                }

                .button-group {
                    display: flex;
                    flex-direction: column;
                    gap: 0.625rem;
                }

                .download-count {
                    color: rgba(255, 255, 255, 0.5);
                    font-size: 0.875rem;
                    text-align: center;
                    padding: 0.5rem;
                    border-radius: 0.5rem;
                    background: rgba(255, 255, 255, 0.03);
                }

                .divider {
                    border-color: rgba(255, 255, 255, 0.1);
                    margin: 0;
                }

                .toggle-button {
                    font-size: 0.875rem;
                    transition: all 200ms ease;
                    padding: 0.75rem;
                    margin: -0.75rem;
                    color: rgba(255, 255, 255, 0.7);
                    text-align: center;
                    border-radius: 0.5rem;
                    cursor: pointer;

                    &:hover {
                        color: white;
                        background: rgba(255, 255, 255, 0.05);
                    }

                    .icons {
                        opacity: 0.7;
                        transition: opacity 200ms ease;

                        &:hover {
                            opacity: 1;
                        }
                    }
                }

                .button,
                .toggle-button {
                    display: inline-flex;
                    align-items: center;
                    gap: 0.5rem;
                    justify-content: center;
                    cursor: pointer;
                }
            }
        }
    }

    @keyframes show {
        from {
            opacity: 0;
            transform: scale(0.98);
        }
        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    @keyframes fade {
        from {
            opacity: 0;
            transform: translateY(2px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<script>
    class DownloadModal {
        private readonly modal: HTMLDialogElement
        private readonly views: {
            docs: HTMLElement
            downloads: HTMLElement
        }
        private readonly buttons: {
            close: HTMLElement
            showDownloads: HTMLElement
            showDocs: HTMLElement
            playbook: HTMLElement
        }
        private readonly downloadCount: HTMLElement
        private readonly atlasVersion = '0.4.1'
        private readonly apiEndpoint = 'https://api.atlasos.net'

        constructor() {
            const elements = {
                modal: this.getElement('download-modal') as HTMLDialogElement,
                docs: this.getElement('docs-view'),
                downloads: this.getElement('downloads-view'),
                close: this.getElement('modal-close'),
                showDownloads: this.getElement('show-downloads'),
                showDocs: this.getElement('show-docs'),
                playbook: this.getElement('playbook-dl-btn'),
                downloadCount: this.getElement('download-count')
            }

            this.modal = elements.modal
            this.views = {
                docs: elements.docs,
                downloads: elements.downloads
            }
            this.buttons = {
                close: elements.close,
                showDownloads: elements.showDownloads,
                showDocs: elements.showDocs,
                playbook: elements.playbook
            }
            this.downloadCount = elements.downloadCount

            this.setupEventListeners()
        }

        private getElement(id: string): HTMLElement {
            const element = document.getElementById(id)
            if (!element) throw new Error(`Element ${id} not found`)
            return element
        }

        private setupEventListeners(): void {
            document.addEventListener('showModal', () => this.showModal())
            this.buttons.close.addEventListener('click', () => this.modal.close())
            this.buttons.showDownloads.addEventListener('click', () => this.showDownloadsView())
            this.buttons.showDocs.addEventListener('click', () => this.showDocsView())
            this.buttons.playbook.addEventListener('click', () => this.handleDownload())
            this.modal.addEventListener('click', (e) => this.handleClickOutside(e))
        }

        private handleClickOutside(e: MouseEvent): void {
            const rect = this.modal.getBoundingClientRect()
            const isOutside = e.clientX < rect.left || e.clientX > rect.right || e.clientY < rect.top || e.clientY > rect.bottom

            if (isOutside) {
                this.modal.close()
            }
        }

        private showModal(): void {
            this.modal.showModal()
            this.showDocsView()
        }

        private showDownloadsView(): void {
            this.views.docs.style.display = 'none'
            this.views.downloads.style.display = 'flex'
            void this.updateDownloadCount()
        }

        private showDocsView(): void {
            this.views.downloads.style.display = 'none'
            this.views.docs.style.display = 'flex'
        }

        private async updateDownloadCount(): Promise<void> {
            this.downloadCount.textContent = 'Loading...'
            const count = await this.fetchDownloadCount()

            this.downloadCount.textContent = count !== null ? `Atlas has been downloaded ${count.toLocaleString('en-US')} times.` : 'Join thousands of Atlas users!'
        }

        private async fetchDownloadCount(): Promise<number | null> {
            try {
                const response = await fetch(this.apiEndpoint)
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`)

                const data = await response.json()
                const atlasDownload = data.find((download: { version: string }) => download.version === 'atlas')

                return atlasDownload?.count || 0
            } catch (error) {
                console.error('Error fetching download count:', error)
                return null
            }
        }

        private async incrementDownloadCount(): Promise<void> {
            try {
                const response = await fetch(`${this.apiEndpoint}/atlas/increment`, {
                    method: 'POST'
                })

                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`)
            } catch (error) {
                console.error('Error incrementing download count:', error)
            }
        }

        private async handleDownload(): Promise<void> {
            const originalContent = this.buttons.playbook.innerHTML
            this.buttons.playbook.textContent = 'Downloading...'

            window.open(`https://cdn.jsdelivr.net/atlas/${this.atlasVersion}/AtlasPlaybook_v${this.atlasVersion}.zip`, '_self')

            try {
                await this.incrementDownloadCount()
            } catch (error) {
                console.error('Failed to increment download count:', error)
            }

            setTimeout(() => {
                this.buttons.playbook.innerHTML = originalContent
            }, 1000)
        }
    }

    new DownloadModal()
</script>
