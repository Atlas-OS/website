---
import { Image } from 'astro:assets'

import GitHub from '../assets/img/github-overview.webp'
import Chevron from '../assets/img/chevron.svg'
import GitHubStar from '../assets/img/github-star.svg'
import GPLLogo from '../assets/img/gpl3-logo.svg'
import ExternalLink from './ExternalLink.astro'

interface Props {
    links: {
        github: string
    }
}

const { links } = Astro.props
---

<div class="open-source-section">
    <div class="github-wrapper">
        <Image class="gh-image" src={GitHub} loading="lazy" alt="GitHub repository" />
        <div class="gh-stars" id="gh-stars-wrap">
            <button type="button" class="gh-stars-button" id="toggle-star-list-btn">
                <div class="gh-stars-info">
                    <div class="content">
                        <div class="star">
                            <Image src={GitHubStar} loading="lazy" alt="GitHub star" />
                        </div>
                        <p>Starred</p>
                        <span class="star-count" id="star-amount-badge">ERROR</span>
                    </div>
                    <div class="line"></div>
                    <div class="content">
                        <div class="chevron-wrap">
                            <Image src={Chevron} loading="lazy" alt="Chevron" width={15} height={8} />
                        </div>
                    </div>
                </div>
            </button>
            <div class="gh-recent-stars" id="gh-star-list">
                <div class="content-wrap" id="gh-star-list-items"></div>
            </div>
        </div>
    </div>
    <div class="gpl-info">
        <h2>An open-source, <span class="highlight">GPL-3.0</span> project</h2>
        <p>We are an open-source project, licensed under GPL-3.0 and our GitHub repository has many stargazers. We would greatly appreciate it if you check it out and, if interested, consider contributing to our vision.</p>
        <div class="stargazer-count">
            <div class="stargazers">
                <div class="star">
                    <Image src={GitHubStar} loading="lazy" alt="GitHub star" />
                </div>
                <p>
                    <span id="star-amount-tag">ERROR</span><span>stargazers</span> on <ExternalLink href={links.github} ariaLabel="Open GitHub" children="GitHub" />
                </p>
            </div>
            <Image src={GPLLogo} class="gpl-logomark" loading="lazy" alt="GPL logo" />
        </div>
    </div>
</div>

<style is:global>
    .open-source-section {
        display: flex;
        justify-content: space-between;
        margin-top: 360px;

        .gpl-info {
            opacity: 0;
            text-align: end;
            max-width: 587px;

            h2 {
                margin-bottom: 30px;
                font-size: 60px;
                font-weight: 600;
            }

            p {
                max-width: 570px;
            }

            .stargazer-count {
                display: flex;
                align-items: center;
                justify-content: flex-end;
                gap: 30px;
                margin-top: 40px;

                .stargazers {
                    display: flex;
                    align-items: center;
                    gap: 8px;

                    .star {
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        width: 19px;
                        height: 19px;
                    }

                    span {
                        color: hsl(41, 68%, 55%);
                        margin-right: 4px;
                    }
                }

                .gpl-logomark {
                    width: auto;
                    height: 40px;
                }
            }
        }

        .github-wrapper {
            opacity: 0;
            position: relative;
            width: 587px;
            height: 330px;

            .gh-image {
                border-radius: 5px;
                width: 100%;
                height: auto;
            }

            .gh-stars {
                position: absolute;
                bottom: -7px;
                right: -60px;
                background-color: hsl(214, 13%, 25%);
                border: 1px solid hsl(212, 11%, 31%);
                border-radius: 5px;
                color: hsl(203, 23%, 71%);
                width: 270px;
                transition: border-radius 0.3s ease;
                cursor: pointer;

                &.toggled {
                    border-radius: 5px 5px 0 0;
                }

                .gh-stars-button {
                    width: 100%;
                    background: none;
                    border: none;
                    padding: 0;
                    color: inherit;
                    cursor: pointer;
                    text-align: left;

                    &:hover {
                        opacity: 0.9;
                    }

                    &.toggled {
                        .chevron-wrap img {
                            transform: rotate(180deg);
                        }
                    }
                }

                .gh-stars-info {
                    width: 270px;
                    display: flex;
                    justify-content: center;

                    .content {
                        display: flex;
                        align-items: center;
                        padding: 8px 18px;

                        .chevron-wrap {
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            width: 15px;
                            height: 8px;

                            img {
                                width: 15px;
                                height: 8px;
                                transition: transform 0.3s ease;
                            }
                        }

                        .star {
                            width: 19px;
                            height: 19px;
                            margin-right: 15px;
                        }

                        .star-count {
                            background-color: hsl(213, 12%, 30%);
                            border-radius: 15px;
                            font-size: 14px;
                            padding: 8px 14px;
                            margin-left: 30px;
                            margin-right: 2px;
                        }
                    }

                    .line {
                        width: 1px;
                        height: auto;
                        background-color: hsl(212, 11%, 31%);
                        margin: 8px 0;
                    }
                }

                .gh-recent-stars {
                    position: absolute;
                    width: 270px;
                    margin-left: -1px;
                    border-radius: 0 0 5px 5px;
                    height: 0;
                    opacity: 0;
                    overflow: hidden;
                    transition: all 0.3s ease-in-out;
                    z-index: 10;

                    &.show {
                        height: 262px;
                        opacity: 1;
                    }

                    .content-wrap {
                        padding: 20px;
                        display: flex;
                        flex-direction: column;
                        gap: 20px;
                        background-color: hsl(214, 13%, 25%);
                        border: 1px solid hsl(212, 11%, 31%);
                        border-top: none;
                    }

                    .content {
                        display: flex;
                        gap: 10px;
                        align-items: center;

                        img {
                            width: 40px;
                            height: 40px;
                            border-radius: 50%;
                            object-fit: cover;
                        }
                    }
                }
            }
        }

        @media (max-width: 1080px) {
            display: flex;
            flex-direction: column;
            align-items: flex-end;

            .gpl-info {
                max-width: 95%;
                text-align: right;

                p {
                    margin-left: auto;
                }
            }

            .github-wrapper {
                display: none;
            }
        }

        @media (max-width: 500px) {
            margin-top: 150px;

            .gpl-info {
                h2 {
                    font-size: 36px;
                    margin-bottom: 20px;
                }
            }
        }
    }
</style>

<script>
    import { animateElement } from '../utils/animations'

    interface StarData {
        count: number
    }

    interface StargazerInfo {
        username: string
        avatar: string
    }

    class GitHubStarsManager {
        private readonly starListItems: HTMLElement | null
        private readonly starCountElement: HTMLElement | null
        private readonly starBadgeElement: HTMLElement | null

        constructor() {
            this.starListItems = document.getElementById('gh-star-list-items')
            this.starCountElement = document.getElementById('star-amount-tag')
            this.starBadgeElement = document.getElementById('star-amount-badge')

            this.initializeDropdown()

            if (import.meta.env.MODE === 'production') {
                this.updateStarInfo()
            }
        }

        private initializeDropdown(): void {
            const toggleButton = document.getElementById('toggle-star-list-btn')
            const starList = document.getElementById('gh-star-list')
            const starsWrapper = document.getElementById('gh-stars-wrap')

            if (!toggleButton || !starList || !starsWrapper) {
                console.error('Required DOM elements not found')
                return
            }

            toggleButton.addEventListener('click', (e) => {
                e.stopPropagation()
                starList.classList.toggle('show')
                starsWrapper.classList.toggle('toggled')
                toggleButton.classList.toggle('toggled')
            })

            // Close dropdown when clicking outside
            document.addEventListener('click', (event) => {
                const target = event.target as HTMLElement
                if (!starsWrapper.contains(target)) {
                    starList.classList.remove('show')
                    starsWrapper.classList.remove('toggled')
                    toggleButton.classList.remove('toggled')
                }
            })
        }

        private async fetchData<T>(url: string): Promise<T> {
            try {
                const response = await fetch(url)
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`)
                }
                return (await response.json()) as T
            } catch (error) {
                console.error(`Failed to fetch data from ${url}:`, error)
                throw error
            }
        }

        private createStarElement(star: StargazerInfo): HTMLDivElement {
            const starElement = document.createElement('div')
            starElement.classList.add('content')

            const userImgElement = document.createElement('img')
            userImgElement.alt = `${star.username}'s avatar`
            userImgElement.loading = 'lazy'
            userImgElement.src = `https://github.com/${star.username}.png`

            const userNameElement = document.createElement('p')
            userNameElement.textContent = star.username

            starElement.append(userImgElement, userNameElement)
            return starElement
        }

        private async updateStarInfo(): Promise<void> {
            try {
                // Fetch star count
                const [starData] = await this.fetchData<StarData[]>('https://api.atlasos.net/stars')
                const starCount = starData.count

                // Update star count displays
                if (this.starCountElement && this.starBadgeElement) {
                    this.starCountElement.textContent = starCount.toLocaleString()
                    this.starBadgeElement.textContent = `${(starCount / 1000).toFixed(1)}k`
                }

                // Fetch and display recent stargazers
                if (this.starListItems) {
                    const recentStars = await this.fetchData<StargazerInfo[]>('https://api.atlasos.net/recent-stars')
                    const recentStarElements = recentStars.slice(0, 4).map((star) => this.createStarElement(star))

                    this.starListItems.replaceChildren(...recentStarElements)
                }
            } catch (error) {
                console.error('Failed to update star information:', error)
                // Set fallback values
                if (this.starCountElement) this.starCountElement.textContent = '---'
                if (this.starBadgeElement) this.starBadgeElement.textContent = '---'
            }
        }
    }

    // Initialize everything when the DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
        // Initialize the stars manager
        new GitHubStarsManager()

        // Initialize the animations
        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        // Animate gpl-info (coming from right and up)
                        animateElement({
                            selector: '.open-source-section .gpl-info',
                            keyframes: { opacity: [0, 1], x: [30, 0], y: [30, 0] },
                            options: { duration: 0.8 }
                        })

                        // Animate github-wrapper (coming from left and up)
                        animateElement({
                            selector: '.open-source-section .github-wrapper',
                            keyframes: { opacity: [0, 1], x: [-30, 0], y: [30, 0] },
                            options: { duration: 0.8 }
                        })

                        observer.disconnect()
                    }
                })
            },
            { threshold: 0.2 }
        )

        const section = document.querySelector('.open-source-section')
        if (section) {
            observer.observe(section)
        }
    })
</script>
